# Laravel Backend Dockerfile
FROM php:8.3-cli

# Install system dependencies
RUN apt-get update && apt-get install -y \
    zip unzip git curl \
    libzip-dev \
    poppler-utils \
    && docker-php-ext-install zip \
    && rm -rf /var/lib/apt/lists/*

# Install Composer
COPY --from=composer:latest /usr/bin/composer /usr/bin/composer

# Set working directory
WORKDIR /var/www/html

# Leverage docker cache: copy composer files first
COPY composer.json composer.lock ./

# Install PHP dependencies (deterministic from lock file)
RUN composer install --no-interaction --prefer-dist --optimize-autoloader --no-scripts \
 || composer update --no-interaction --prefer-dist --optimize-autoloader --no-scripts

# Copy the rest of the source code
COPY . .

# Create SQLite database directory
RUN mkdir -p /var/www/html/database && \
    touch /var/www/html/database/database.sqlite && \
    chmod 664 /var/www/html/database/database.sqlite

# Set permissions
RUN mkdir -p /var/www/html/storage/logs && \
    chmod -R 775 /var/www/html/storage && \
    chmod -R 775 /var/www/html/bootstrap/cache

# Copy and set entrypoint script
COPY docker-entrypoint.sh /usr/local/bin/
RUN chmod +x /usr/local/bin/docker-entrypoint.sh

# Expose port
EXPOSE 8000

# Health check for Laravel (lightweight)
HEALTHCHECK --interval=30s --timeout=10s --start-period=5s --retries=3 \
  CMD curl -sf http://localhost:8000/api/health | grep -q '"status":"ok"' || exit 1

# Set entrypoint and start PHP built-in server with proper routing
ENTRYPOINT ["docker-entrypoint.sh"]
CMD ["php", "-S", "0.0.0.0:8000", "-t", "public", "public/index.php"]
